services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    # Exposição opcional para acesso externo (remover em produção se não necessário)
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      context: ./apps/api
    env_file: [ .env ]
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    command: ["bash", "-lc", "alembic upgrade head"]
    restart: "no"

  api:
    build:
      context: ./apps/api
    env_file: [ .env ]
    environment:
      ENV: production
      COOKIE_DOMAIN: .lifeservicos.com
      FRONTEND_URL: https://lifeservicos.com,https://www.lifeservicos.com
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISS: ${JWT_ISS}
      UPLOAD_DIR: /app/uploads
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    volumes:
      - uploads:/app/uploads
    command: ["bash", "-lc", "uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.prod
    env_file: [ .env ]
    environment:
      NEXT_PUBLIC_API_BASE_URL: https://api.lifeservicos.com
      NODE_ENV: production
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/"]
      interval: 30s
      timeout: 5s
      retries: 5

  pgbackup:
    image: prodrigestivill/postgres-backup-local:16
    env_file: [ .env ]
    environment:
      POSTGRES_HOST: ${DB_HOST}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      SCHEDULE: ${PG_BACKUP_CRON:-0 3 * * *}
      BACKUP_DIR: /backups
      BACKUP_KEEP_DAYS: ${PG_BACKUP_KEEP_DAYS:-7}
      BACKUP_KEEP_WEEKS: ${PG_BACKUP_KEEP_WEEKS:-4}
      BACKUP_KEEP_MONTHS: ${PG_BACKUP_KEEP_MONTHS:-3}
      POSTGRES_EXTRA_OPTS: -Z9 --format=custom
      TZ: ${TZ:-America/Sao_Paulo}
    volumes:
      - ./backups/pg:/backups
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  proxy:
    image: caddy:2
    depends_on:
      web:
        condition: service_healthy
      api:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    restart: unless-stopped

volumes:
  pg_data:
  uploads:
  caddy_data:
  caddy_config:
