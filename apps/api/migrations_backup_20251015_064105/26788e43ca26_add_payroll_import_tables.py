"""add_payroll_import_tables

Revision ID: 26788e43ca26
Revises: 981d805c8617
Create Date: 2025-09-29 01:10:21.715812

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '26788e43ca26'
down_revision: Union[str, None] = '981d805c8617'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create payroll_clients table
    op.create_table('payroll_clients',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('cpf', sa.String(length=14), nullable=False),
        sa.Column('matricula', sa.String(length=20), nullable=False),
        sa.Column('nome', sa.String(length=200), nullable=False),
        sa.Column('orgao', sa.String(length=200), nullable=True),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('cpf', 'matricula', name='uq_payroll_client_cpf_matricula')
    )

    # Create payroll_contracts table
    op.create_table('payroll_contracts',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('client_id', sa.Integer(), nullable=False),
        sa.Column('entidade_code', sa.String(length=10), nullable=False),
        sa.Column('entidade_name', sa.String(length=200), nullable=False),
        sa.Column('referencia_month', sa.Integer(), nullable=False),
        sa.Column('referencia_year', sa.Integer(), nullable=False),
        sa.Column('valor_parcela', sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column('total_parcelas', sa.Integer(), nullable=False),
        sa.Column('parcelas_pagas', sa.Integer(), nullable=False),
        sa.Column('cargo', sa.String(length=120), nullable=True),
        sa.Column('fin', sa.String(length=8), nullable=True),
        sa.Column('orgao_codigo', sa.String(length=12), nullable=True),
        sa.Column('lanc', sa.String(length=12), nullable=True),
        sa.Column('status', sa.String(length=30), nullable=False, server_default='ativo'),
        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['client_id'], ['payroll_clients.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('client_id', 'entidade_code', 'referencia_month', 'referencia_year', name='uq_payroll_contract_ref')
    )

    # Create payroll_import_batches table
    op.create_table('payroll_import_batches',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('file_name', sa.String(length=255), nullable=False),
        sa.Column('entidade_code', sa.String(length=10), nullable=False),
        sa.Column('entidade_name', sa.String(length=200), nullable=False),
        sa.Column('referencia_month', sa.Integer(), nullable=False),
        sa.Column('referencia_year', sa.Integer(), nullable=False),
        sa.Column('processed_by', sa.Integer(), nullable=True),
        sa.Column('processed_at', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Create payroll_import_items table
    op.create_table('payroll_import_items',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('batch_id', sa.Integer(), nullable=False),
        sa.Column('client_id', sa.Integer(), nullable=True),
        sa.Column('contract_id', sa.Integer(), nullable=True),
        sa.Column('raw_line', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['batch_id'], ['payroll_import_batches.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['client_id'], ['payroll_clients.id'], ondelete='SET NULL'),
        sa.ForeignKeyConstraint(['contract_id'], ['payroll_contracts.id'], ondelete='SET NULL'),
        sa.PrimaryKeyConstraint('id')
    )

    # Clean up old import-related fields from cases (if they exist)
    try:
        with op.batch_alter_table('cases', schema=None) as batch_op:
            batch_op.drop_constraint('fk_cases_import_batch', type_='foreignkey')
            batch_op.drop_column('importado_em')
            batch_op.drop_column('entidade')
            batch_op.drop_column('referencia_competencia')
            batch_op.drop_column('import_batch_id')
            batch_op.drop_column('previous_contracts_snapshot')
    except:
        # If columns don't exist, continue
        pass

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop payroll tables
    op.drop_table('payroll_import_items')
    op.drop_table('payroll_import_batches')
    op.drop_table('payroll_contracts')
    op.drop_table('payroll_clients')

    # Restore old import fields to cases (if needed)
    try:
        with op.batch_alter_table('cases', schema=None) as batch_op:
            batch_op.add_column(sa.Column('previous_contracts_snapshot', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('import_batch_id', sa.INTEGER(), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('referencia_competencia', sa.VARCHAR(length=7), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('entidade', sa.VARCHAR(length=120), autoincrement=False, nullable=True))
            batch_op.add_column(sa.Column('importado_em', sa.DATE(), autoincrement=False, nullable=True))
            batch_op.create_foreign_key('fk_cases_import_batch', 'imports', ['import_batch_id'], ['id'], ondelete='SET NULL')
    except:
        pass

    # ### end Alembic commands ###
