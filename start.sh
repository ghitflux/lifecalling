#!/bin/bash

# Script de inicializa√ß√£o do Lifecalling
# Executa migra√ß√µes pendentes e inicia os servidores

set -e  # Para na primeira falha

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m' # No Color

# Vari√°veis
SKIP_MIGRATIONS=false
DEV_MODE=true

# Fun√ß√£o de ajuda
show_help() {
    echo -e "${GREEN}Script de inicializa√ß√£o do Lifecalling${NC}"
    echo ""
    echo -e "${YELLOW}Uso: ./start.sh [op√ß√µes]${NC}"
    echo ""
    echo -e "${YELLOW}Op√ß√µes:${NC}"
    echo "  --skip-migrations    Pula a execu√ß√£o das migra√ß√µes"
    echo "  --prod              Executa em modo produ√ß√£o"
    echo "  --help              Mostra esta ajuda"
    echo ""
    echo -e "${YELLOW}Exemplos:${NC}"
    echo "  ./start.sh                    # Executa com migra√ß√µes em modo dev"
    echo "  ./start.sh --skip-migrations  # Pula migra√ß√µes"
    echo "  ./start.sh --prod             # Executa em modo produ√ß√£o"
    exit 0
}

# Parse argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-migrations)
            SKIP_MIGRATIONS=true
            shift
            ;;
        --prod)
            DEV_MODE=false
            shift
            ;;
        --help)
            show_help
            ;;
        *)
            echo -e "${RED}Op√ß√£o desconhecida: $1${NC}"
            show_help
            ;;
    esac
done

echo -e "${GREEN}üöÄ Iniciando Lifecalling...${NC}"
echo ""

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para verificar depend√™ncias
check_dependencies() {
    echo -e "${YELLOW}üîç Verificando depend√™ncias...${NC}"
    
    local missing=()
    
    if ! command_exists docker; then
        missing+=("Docker")
    fi
    
    if ! command_exists node; then
        missing+=("Node.js")
    fi
    
    if ! command_exists pnpm; then
        missing+=("pnpm")
    fi
    
    if [ ${#missing[@]} -ne 0 ]; then
        echo -e "${RED}‚ùå Depend√™ncias faltando: ${missing[*]}${NC}"
        echo -e "${RED}Por favor, instale as depend√™ncias antes de continuar.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Todas as depend√™ncias encontradas${NC}"
}

# Fun√ß√£o para verificar arquivo .env
check_environment() {
    echo -e "${YELLOW}üîß Verificando configura√ß√£o...${NC}"
    
    if [ ! -f ".env" ]; then
        echo -e "${RED}‚ùå Arquivo .env n√£o encontrado!${NC}"
        echo -e "${RED}Crie um arquivo .env baseado no exemplo.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
}

# Fun√ß√£o para iniciar servi√ßos Docker
start_docker_services() {
    echo -e "${YELLOW}üê≥ Iniciando servi√ßos Docker...${NC}"
    
    if ! docker compose -f docker.compose.yml up -d db; then
        echo -e "${RED}‚ùå Erro ao iniciar servi√ßos Docker${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Banco de dados iniciado${NC}"
    
    # Aguarda o banco estar pronto
    echo -e "${YELLOW}‚è≥ Aguardando banco de dados...${NC}"
    sleep 10
}

# Fun√ß√£o para executar migra√ß√µes
run_migrations() {
    if [ "$SKIP_MIGRATIONS" = true ]; then
        echo -e "${YELLOW}‚è≠Ô∏è Pulando migra√ß√µes (--skip-migrations)${NC}"
        return
    fi
    
    echo -e "${YELLOW}üìä Executando migra√ß√µes...${NC}"
    
    # Verifica se o banco est√° dispon√≠vel
    local retries=0
    local max_retries=30
    
    while [ $retries -lt $max_retries ]; do
        if docker compose -f docker.compose.yml exec -T db psql -U lifecalling -d lifecalling -c "SELECT 1;" >/dev/null 2>&1; then
            break
        fi
        echo -e "${YELLOW}‚è≥ Aguardando banco de dados... ($((retries + 1))/$max_retries)${NC}"
        sleep 2
        ((retries++))
    done
    
    if [ $retries -eq $max_retries ]; then
        echo -e "${RED}‚ùå Timeout aguardando banco de dados${NC}"
        exit 1
    fi
    
    # Executa as migra√ß√µes
    cd apps/api
    if ! docker run --rm --network lifecalling_default \
        -v "$(pwd):/app" -w /app \
        --env-file "../../.env" \
        python:3.11-slim bash -c "pip install -r requirements.txt && alembic upgrade head"; then
        echo -e "${RED}‚ùå Erro ao executar migra√ß√µes${NC}"
        cd ../..
        exit 1
    fi
    cd ../..
    
    echo -e "${GREEN}‚úÖ Migra√ß√µes executadas com sucesso${NC}"
}

# Fun√ß√£o para instalar depend√™ncias
install_dependencies() {
    echo -e "${YELLOW}üì¶ Instalando depend√™ncias...${NC}"
    
    if ! pnpm install; then
        echo -e "${RED}‚ùå Erro ao instalar depend√™ncias${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias instaladas${NC}"
}

# Fun√ß√£o para iniciar servidores
start_servers() {
    echo -e "${YELLOW}üåê Iniciando servidores...${NC}"
    
    # Inicia API via Docker
    echo -e "${CYAN}üîß Iniciando API (FastAPI)...${NC}"
    if ! docker compose -f docker.compose.yml up -d api; then
        echo -e "${RED}‚ùå Erro ao iniciar API${NC}"
        exit 1
    fi
    
    sleep 3
    
    # Inicia aplica√ß√£o web
    echo -e "${CYAN}üåê Iniciando aplica√ß√£o web (Next.js)...${NC}"
    
    cd apps/web
    if [ "$DEV_MODE" = true ]; then
        pnpm dev &
    else
        pnpm build && pnpm start &
    fi
    WEB_PID=$!
    cd ../..
    
    echo -e "${GREEN}‚úÖ Servidores iniciados!${NC}"
}

# Fun√ß√£o para mostrar status
show_status() {
    echo ""
    echo -e "${GREEN}üéâ Lifecalling iniciado com sucesso!${NC}"
    echo ""
    echo -e "${YELLOW}üìç URLs dispon√≠veis:${NC}"
    echo -e "  ‚Ä¢ API:            ${CYAN}http://localhost:8000${NC}"
    echo -e "  ‚Ä¢ Docs (Swagger): ${CYAN}http://localhost:8000/docs${NC}"
    echo -e "  ‚Ä¢ Web App:        ${CYAN}http://localhost:3000${NC}"
    echo ""
    echo -e "${YELLOW}üîß Comandos √∫teis:${NC}"
    echo -e "  ‚Ä¢ Ver logs API:  ${GRAY}docker compose -f docker.compose.yml logs api -f${NC}"
    echo -e "  ‚Ä¢ Parar tudo:    ${GRAY}docker compose -f docker.compose.yml down${NC}"
    echo -e "  ‚Ä¢ Reset DB:      ${GRAY}docker compose -f docker.compose.yml down -v${NC}"
    echo ""
    echo -e "${YELLOW}Pressione Ctrl+C para parar os servi√ßos.${NC}"
}

# Fun√ß√£o para cleanup
cleanup() {
    echo ""
    echo -e "${YELLOW}üõë Parando servi√ßos...${NC}"
    
    # Para o servidor web se estiver rodando
    if [ ! -z "$WEB_PID" ]; then
        kill $WEB_PID 2>/dev/null || true
    fi
    
    # Para os servi√ßos Docker
    docker compose -f docker.compose.yml down
    
    echo -e "${GREEN}‚úÖ Servi√ßos parados${NC}"
    exit 0
}

# Configura trap para cleanup
trap cleanup SIGINT SIGTERM

# Execu√ß√£o principal
main() {
    check_dependencies
    check_environment
    start_docker_services
    install_dependencies
    run_migrations
    start_servers
    show_status
    
    # Mant√©m o script rodando
    while true; do
        sleep 1
    done
}

# Executa fun√ß√£o principal
main "$@"